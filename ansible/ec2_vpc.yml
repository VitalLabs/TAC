---
#Create and config the VPC
- name: VPC creation and configure
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
  - group_vars/all
  tasks:

  - name: Include the variables specific to the vpc
    include_vars: envs/{{ environ| default("dev") }}

  - name: Create the VPC 
    local_action:
      module: ec2_vpc
      state: present
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      cidr_block: "{{ vpc_cidr_block }}"
      subnets: "{{ vpc_subnets }}"
      internet_gateway: "{{ vpc_internet_gateway|string }}"
      route_tables: "{{ vpc_route_tables }}"
      wait: true
    register: vpc

  - name: Write out a temporary file for mapping subnet to id
    template: src=templates/subnet_id.j2 dest=/tmp/subnet_id

  - name: Get the contents of subnet mapping file and set it as a fact
    set_fact:
      subnet_maps: "{{ lookup('file', '/tmp/subnet_id') }}"
  
  ### This is the NAT instance for routing traffic and jumphost, etc.

  - name: Create the NAT Instance
    ec2:
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      instance_type: "{{ vpc_nat_instance_type }}"
      image: "{{ vpc_nat_instance_id }}"
      vpc_subnet_id: "{{ item.id }}"
      wait: true
      instance_tags: 
        Name: "{{ environ|default('dev') + '_nat_instance' }}"
      #exact_count: 1
      #count_tag: 
        #Name: "{{ environ|default('dev') + '_nat_instance' }}"
    register: ec2
    with_items: vpc.subnets
    when: vpc_internet_gateway and item['cidr'] == vpc_public_subnet

  - name: Get the routing table entry for the main table.
    shell: > 
      {{ ec2_bin_path }}/ec2-describe-route-tables -O {{ ec2_access_key }} -W {{ ec2_secret_key }} -F vpc-id={{ vpc.vpc_id }} -F "association.main=true"  | grep ROUTETABLE | awk '{ print $2 }' 
    register: main_rtb
    when: vpc.changed and vpc_internet_gateway

  - name: Set the fact for NAT Instance variable
    set_fact: nat_instance="{{ item.tagged_instances[0].id }}"
    with_items: ec2.results
    when: item.tagged_instances is defined

  - name: Set the gateway to nat interface.
    shell: >
      {{ ec2_bin_path }}/ec2-create-route  -O {{ ec2_access_key }} -W {{ ec2_secret_key }} {{ main_rtb.stdout }} -r 0.0.0.0/0 -i {{ nat_instance }}
    when: vpc.changed and vpc_internet_gateway

  - name: Create the security group for the VPC
    local_action:
      module: ec2_group
      name: "{{ vpc_group.name }}"
      description: "{{ vpc_group.desc }}"
      vpc_id: "{{ vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      rules: "{{ vpc_group.rules }}"

  - name: Create the Instances for this vpc 
    ec2:
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ item.keypair }}"
      instance_type: "{{ item.instance_type }}"
      image: "{{ item.image }}"
      vpc_subnet_id: "{{ subnet_maps[item.subnet] }}"
      wait: true
      instance_tags: "{{ item.instance_tags }}"
      #exact_count: "{{ item.exact_count }}"
      #count_tag: "{{ item.count_tag }}"
    register: ec2
    with_items: vpc_instances

- name: bring instances up to date
  hosts: all
  remote_user: ubuntu
  sudo: true
  tasks:
  - name: required packages
    apt: name={{ item }} state=latest update_cache=yes cache_valid_time=3600
    with_items:
      - python-apt
  - name: dist upgrade
    apt: upgrade=dist
    with_items: ec2.instances
  - name: reboot to make sure everything is fresh
    shell: /sbin/reboot &
    with_items: ec2.instances

- name: wait for the server to go down (reboot)
  local_action: wait_for host={{ item.public_ip }} port=22 state=stopped
  with_items: ec2.instances

- name: Wait for the server to wake back up
  local_action: wait_for host={{ item.public_ip }} port=22 delay=30
  with_items: ec2.instances