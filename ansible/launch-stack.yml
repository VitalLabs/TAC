---
hosts: localhost
vars_files:
  - vars/ec2.yml
tasks:
- name: Include the variables specific to the vpc
  include_vars: envs/{{ environ| default("dev") }}   
- name: Create the VPC 
  local_action:
    module: ec2_vpc
    state: present
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    cidr_block: "{{ vpc_cidr_block }}"
    subnets: "{{ vpc_subnets }}"
    internet_gateway: "{{ vpc_internet_gateway|string }}"
    route_tables: "{{ vpc_route_tables }}"
    wait: true
  register: vpc   
- name: Create the NAT Instance
  ec2: 
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    keypair: "{{ ec2_keypair }}"
    instance_type: "{{ vpc_nat_instance_type }}"
    image: "{{ vpc_nat_instance_id }}"
    vpc_subnet_id: "{{ item.id }}"
    wait: true
    instance_tags: 
        Name: "{{ environ|default('dev') + '_nat_instance' }}"
    exact_count: 1
    count_tag: 
        Name: "{{ environ|default('dev') + '_nat_instance' }}"
    register: ec2
    with_items: vpc.subnets
    when: vpc_internet_gateway and item['cidr'] == vpc_public_subnet

- name: Get the routing table entry.
  shell: > 
    {{ ec2_bin_path }}/ec2-describe-route-tables -O {{ ec2_access_key }} -W {{ ec2_secret_key }} -F vpc-id={{ vpc.vpc_id }} -F "association.main=true"  | grep ROUTETABLE | awk '{ print $2 }'
  register: main_rtb

- name: Set the NAT Instance variable
  set_fact: nat_instance="{{ item.tagged_instances[0].id }}"
  with_items: ec2.results
  when: item.tagged_instances is defined

- name: Set the gateway to nat interface.
  shell: > 
    {{ ec2_bin_path }}/ec2-create-route  -O {{ ec2_access_key }} -W {{ ec2_secret_key }} {{ main_rtb.stdout }} -r 0.0.0.0/0 -i {{ nat_instance }}
  when: vpc.changed

- name: Create the security group for the VPC
  local_action:
    module: ec2_group
    name: "{{ vpc_group.name }}"
    description: "{{ vpc_group.desc }}"
    vpc_id: "{{ vpc.vpc_id }}"
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    rules: "{{ vpc_group.rules }}"

- include: launch-proxy.yml
- include: launch-db.yml
- include: launch-app.yml
