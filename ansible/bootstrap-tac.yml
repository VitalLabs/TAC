---
# Baseline Provisioning
- name: provision TAC instances
  hosts: tag_dev_tac_master
  remote_user: ubuntu
  sudo: yes

  vars_files:
  - group_vars/tag_dev_all_
  - group_vars/tag_TAC_all_

  tasks:
    - name: update system
      apt: upgrade=full update_cache=yes
      notify:
        - restart machine

    - name: install needed software
      apt: name={{ item }} state=installed update_cache=yes
      with_items:
        - auditd
        - xfsprogs
        - tree
        - r-base
        - python
        - acl
      notify:
        - restart machine

    - name: create tac_workgroup
      group: name=tac_workgroup state=present
      tags:
        - workdir
        - users
        - groups
      notify:
        - restart machine

    - name: create tac_ingressgroup
      group: name=tac_ingressgroup state=present
      tags:
        - ingressdir
        - users
        - groups
      notify:
        - restart machine

    - name: create tac_egressgroup
      group: name=tac_egressgroup state=present
      tags:
        - egressdir
        - users
        - groups
      notify:
        - restart machine

    - name: create working users ssh keys
      local_action: shell /usr/bin/ssh-keygen -n "{{ item.name }}" -f "{{ item.name }}.key" -N '' creates="{{ item.name }}.key"
      with_items: tac_work_users
      sudo: no
      when: generate_keys == True
      tags:
        - users
      notify:
        - restart machine

    - name: create ingress users ssh keys
      local_action: shell /usr/bin/ssh-keygen -n "{{ item.name }}" -f "{{ item.name }}.key" -N '' creates="{{ item.name }}.key"
      with_items: tac_ingress_users
      sudo: no
      when: generate_keys == True
      tags:
        - users
      notify:
        - restart machine

    - name: create egress users ssh keys
      local_action: shell /usr/bin/ssh-keygen -n "{{ item.name }}" -f "{{ item.name }}.key" -N '' creates="{{ item.name }}.key"
      with_items: tac_egress_users
      sudo: no
      when: generate_keys == True
      tags:
        - users
      notify:
        - restart machine

    - name: create working users
      user: name="{{ item.name }}" state=present groups='tac_workgroup'
      with_items: tac_work_users
      tags:
        - users
      notify:
        - restart machine

    - name: create ingress users
      user: name="{{ item.name }}" state=present groups='tac_ingressgroup'
      with_items: tac_ingress_users
      tags:
        - users
      notify:
        - restart machine

    - name: create egress users
      user: name="{{ item.name }}" state=present groups='tac_egressgroup'
      with_items: tac_egress_users
      tags:
        - users
      notify:
        - restart machine

    - name: ssh key for working users
      authorized_key: user="{{ item.name }}" key="{{ item.key }}"
      with_items: tac_work_users
      tags:
        - users
      
    - name: ssh key for ingress users
      authorized_key: user="{{ item.name }}" key="{{ item.key }}"
      with_items: tac_ingress_users
      tags:
        - users
      
    - name: ssh key for egress users
      authorized_key: user="{{ item.name }}" key="{{ item.key }}"
      with_items: tac_egress_users
      tags:
        - users
      
    - name: discover blockid of workdir device
      command: /sbin/blkid {{ tac_workdir_dev }}
      register: tac_workdir_blkid
      ignore_errors: yes
      tags:
        - workdir

    - name: discover blockid of ingress device
      command: /sbin/blkid {{ tac_ingress_dev }}
      register: tac_ingress_blkid
      ignore_errors: yes
      tags:
        - workdir

    - name: discover blockid of egress device
      command: /sbin/blkid {{ tac_egress_dev }}
      register: tac_egress_blkid
      ignore_errors: yes
      tags:
        - workdir

    - name: debug tac_workdir_blkid
      debug: msg="{{ tac_workdir_blkid }}"
      tags:
        - workdir
      
    - name: debug tac_ingress_blkid
      debug: msg="{{ tac_ingress_blkid }}"
      tags:
        - workdir
        
    - name: debug tac_egress_blkid
      debug: msg="{{ tac_egress_blkid }}"
      tags:
        - workdir
        
    - name: create workdir filesystem
      command: /sbin/mkfs -t xfs -L TACWORKSPACE {{ tac_workdir_dev }}
      when: tac_workdir_blkid['rc'] == 2
      tags:
        - workdir
      notify:
        - restart machine

    - name: create ingress filesystem
      command: /sbin/mkfs -t xfs -L TACINGRESS {{ tac_ingress_dev }}
      when: tac_ingress_blkid['rc'] == 2
      tags:
        - workdir
      notify:
        - restart machine

    - name: create egress filesystem
      command: /sbin/mkfs -t xfs -L TACEGRESS {{ tac_egress_dev }}
      when: tac_egress_blkid['rc'] == 2
      tags:
        - workdir
      notify:
        - restart machine

    - name: create fstab
      mount: name={{ tac_workdir_dir }} src='LABEL=TACWORKSPACE' fstype=xfs state=mounted opts=defaults
      tags:
        - workdir
      notify:
        - restart machine

    - name: create fstab
      mount: name={{ tac_ingress_dir }} src='LABEL=TACINGRESS' fstype=xfs state=mounted opts=defaults
      tags:
        - workdir
      notify:
        - restart machine

    - name: create fstab
      mount: name={{ tac_egress_dir }} src='LABEL=TACEGRESS' fstype=xfs state=mounted opts=defaults
      tags:
        - workdir
      notify:
        - restart machine

    - name: workdir mountpoint perms
      file: name={{ tac_workdir_dir }} owner=root group=tac_workgroup state=directory
      tags:
        - workdir
      notify:
        - restart machine

    - name: ingress mountpoint perms
      file: name={{ tac_ingress_dir }} owner=root group=tac_ingressgroup state=directory
      tags:
        - workdir
      notify:
        - restart machine

    - name: egress mountpoint perms
      file: name={{ tac_egress_dir }} owner=root group=tac_egressgroup state=directory
      tags:
        - workdir
      notify:
        - restart machine

    - name: workdir acl
      acl: name={{ tac_workdir_dir }} entity=tac_workgroup etype=group permissions="rwx" state=present
      tags:
        - workdir
      notify:
        - restart machine

    - name: workdir default acl
      acl: name={{ tac_workdir_dir }} entity=tac_workgroup etype=group permissions="rw" default=yes state=present
      tags:
        - workdir
        - acl
      notify:
        - restart machine

    - name: ingress acl
      acl: name={{ tac_ingress_dir }} entity=tac_workgroup etype=group permissions="rx" state=present
      tags:
        - workdir
      notify:
        - restart machine

    - name: ingress acl default
      acl: name={{ tac_ingress_dir }} entity=tac_workgroup etype=group permissions="r" default=yes state=present
      tags:
        - workdir
      notify:
        - restart machine

    - name: egress acl
      acl: name={{ tac_egress_dir }} entity=tac_workgroup etype=group permissions="wx" state=present
      tags:
        - workdir
      notify:
        - restart machine

    - name: egress acl
      acl: name={{ tac_egress_dir }} entity=tac_workgroup etype=group permissions="w" default=yes state=present
      tags:
        - workdir
      notify:
        - restart machine

    - name: create templated audit rules
      template: src=templates/audit.rules.j2 dest=/etc/audit/audit.rules mode=0640 owner=root group=root
      tags:
        - workdir
      notify:
        - restart machine
      
  handlers:
    - name: restart machine
      shell: touch /var/lock/.init-ansible-shutdown && echo shutdown -r now "Ansible updates triggered"
      async: 0
      poll: 0
      ignore_errors: True
      tags:
        - reboot
      notify:
        - pause and wait
        - wait for server

    - name: pause and wait
      pause: seconds=10 prompt="waiting to look for server "
      notify:
        - wait for server

    - name: wait for server
      local_action: wait_for host={{ inventory_hostname }} port={{ ansible_ssh_port }} state=started
      sudo: false
