---
#Provision some instances:
- name: launch TAC instances
  hosts: localhost
  connection: local
  gather_facts: False
  
  vars_files:
  - group_vars/tag_dev_all_
  - group_vars/tag_TAC_all_

  tasks:
    - name: create TAC VPC
      ec2_vpc:
        state: present
        cidr_block: "{{ cidr_block }}"
        resource_tags: {
          "Name":"vital_TAC_VPC"
        }
        subnets: "{{ subnets }}"
        internet_gateway: True
        region: "{{ tac_region }}"
        route_tables: "{{ route_tables }}"
      register: tac_vpc

    - name: debug tac vpc
      debug: msg="{{ tac_vpc['vpc_id'] }}"

    - name: update default security group
      ec2_group:
        name: "default"
        description: "the default TAC VPC security group"
        vpc_id: "{{ tac_vpc['vpc_id'] }}"
        region: "{{ tac_region }}"
        rules: "{{ tac_rules }}"
        rules_egress: "{{ tac_rules_egress }}"
      register: tac_group

    - name: Launch TAC instances
      ec2: 
        region: "{{ tac_region }}"
        zone: "{{ tac_zone }}"
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        keypair: "{{ item.keypair }}"
        instance_type: "{{ item.instance_type }}"
        image: "{{ item.image }}"
        instance_tags: "{{ item.instance_tags }}"
        exact_count: "{{ item.exact_count }}"
        count_tag: "{{ item.count_tag }}"
        wait: true
      register: tac_ec2
      with_items: tac_instances

    - name: debug tac_ec2
      debug: msg="{{ tac_ec2.results }}"

    - name: create working dir EBS volume
      ec2_vol:
        instance: "{{ item.instances[0].id }}"
        region: "{{ tac_region }}"
        device_name: /dev/sdf
        volume_size: 30
      with_items: tac_ec2.results
      register: tac_vol

    - name: flush the EC2 inventory cache
      shell: rm -f ~/.ansible/tmp/ansible-ec2.cache ~/.ansible/tmp/ansible-ec2.index

