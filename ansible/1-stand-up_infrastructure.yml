---
# Create and config the VPC
- name: VPC creation and configure
  hosts: localhost
  connection: local
  gather_facts: False

  tasks:

  - name: Include the variables specific to this environment
    include_vars: envs/{{ environ| default("dev") }}

  - name: Create the VPC 
    local_action:
        module: ec2_vpc
        state: present
      #  instance_tenancy: dedicated
        region: "{{ ec2_region }}"
        ec2_access_key: "{{ ec2_access_key }}"
        ec2_secret_key: "{{ ec2_secret_key }}"
        cidr_block: "{{ vpc_cidr_block }}"
        subnets: "{{ vpc_subnets }}"
        dns_support: true
        dns_hostnames: true
        internet_gateway: "{{ vpc_internet_gateway|string }}"
        route_tables: "{{ vpc_route_tables }}"
        wait: true
    register: vpc

  - debug: var=vpc

  - name: Create the public security group for the VPC
    local_action:
      module: ec2_group
      name: "{{ vpc_public_group.name }}"
      description: "{{ vpc_public_group.desc }}"
      vpc_id: "{{ vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      rules: "{{ vpc_public_group.rules }}"
    register: public_sec_group

  - name: Create the private security group for the VPC
    local_action:
      module: ec2_group
      name: "{{ vpc_private_group.name }}"
      description: "{{ vpc_private_group.desc }}"
      vpc_id: "{{ vpc.vpc_id }}"
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      rules: "{{ vpc_private_group.rules }}"
    register: private_sec_group

  # This is the NAT instance for routing traffic and jumphost, etc.
  - name: Create the NAT Instance
    ec2:
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ ec2_keypair }}"
      instance_type: "{{ vpc_nat_instance_type }}"
      image: "{{ vpc_nat_instance_id }}"
      vpc_subnet_id: "{{ item.id }}"
      wait: true
      instance_tags: 
        Name: dev_nat_instance
      exact_count: 1
      count_tag: 
        Name: dev_nat_instance
    register: ec2
    with_items: vpc.subnets
    when: vpc_internet_gateway and item['cidr'] == vpc_public_subnet

  - name: Disable source dest check on the Nat Interface.
    shell: >
      aws ec2 modify-instance-attribute --instance-id {{ item.tagged_instances[0].id }} --no-source-dest-check
    with_items: ec2.results
    when: item.tagged_instances is defined and  ec2|changed
    environment: aws_creds

  - name: Get the routing table entry for the main table.
    shell: >
      aws ec2 describe-route-tables --filters "Name=vpc-id,Values={{ vpc.vpc_id }}" --filters "Name=association.main,Values=true" | grep -m1 RouteTableId  | awk '{print $2}' | sed s/\"//g
    register: main_rtb
    when: vpc.changed and vpc_internet_gateway
    environment: aws_creds
 
  - name: Set the fact for NAT Instance variable
    set_fact: nat_instance="{{ item.tagged_instances[0].id }}"
    with_items: ec2.results
    when: item.tagged_instances is defined
 
  # - name: Set the gateway to nat interface.
  #   shell: >
  #     aws ec2 create-route --route-table-id {{ main_rtb.stdout }} --destination-cidr-block 0.0.0.0/0 --instance-id  {{ nat_instance }}
  #   when: vpc.changed and vpc_internet_gateway
  #   environment: aws_creds

  # - name: Create the temporary file for adding listeners to the Loadbalancer
  #   template: src=templates/listeners.j2 dest=/tmp/listeners
 
  # - name: Create the LoadBalancer
  #   shell: >
  #     aws elb create-load-balancer --load-balancer-name {{ vpc_lb_name  }}  --listeners file:///tmp/listeners --security-groups {{ public_sec_group.group_id }} --subnets {{ public_subnets }}
  #   when: vpc|changed
  #   environment: aws_creds
   
  # - name: Add the Health Check for the LoadBalancer 
  #   shell: >
  #     aws elb configure-health-check  --load-balancer-name {{ vpc_lb_name  }}  --health-check Target="{{ vpc_lb_health_check.target }}",Interval={{ vpc_lb_health_check.interval }},Timeout={{ vpc_lb_health_check.timeout }},UnhealthyThreshold={{ vpc_lb_health_check.unhealthy_threshold }},HealthyThreshold={{ vpc_lb_health_check.healthy_threshold }}
  #   when: vpc|changed
  #   environment: aws_creds

  # - name: Add the ssl certificate to IAM.
  #   shell: >
  #     aws iam upload-server-certificate --server-certificate-name {{ vpc_lb_cert_name }}  --certificate-body '{{ lookup('file', 'certs/' + vpc_lb_cert_file_name) }}' --private-key '{{ lookup('file', 'certs/' + vpc_lb_key_file_name) }}'; echo $AWS_DEFAULT_REGION
  #   environment: aws_creds
  #   when: vpc|changed

  - name: Create the Instances for this vpc 
    ec2:
      region: "{{ ec2_region }}"
      ec2_access_key: "{{ ec2_access_key }}"
      ec2_secret_key: "{{ ec2_secret_key }}"
      keypair: "{{ item.keypair }}"
      instance_type: "{{ item.instance_type }}"
      image: "{{ item.image }}"
      vpc_subnet_id: "{{ vpc.subnets[0].id }}"
      wait: true
      instance_tags: "{{ item.instance_tags }}"
      exact_count: "{{ item.exact_count }}"
      count_tag: "{{ item.count_tag }}"
    register: ec2
    with_items: vpc_instances

  - debug: var=ec2
