# Deploy github-based apps to immutant via source
---


#   ###
# - name: get the datomic master ip
#   local_action: command "aws ec2 describe-instances --filters "Name=tag-key,Values=datomic_master" | grep PrivateIpAddress | awk '{print $2}' | sed s/\"//g | sed s/\,//g | grep -v "\[" | sort -u"
#   register: datomic_master_ip
#   environment: aws_creds
#   tags: get-datomic-key

#     ###
# - name: debug the datomic master ip
#   debug: msg="{{ datomic_master_ip }}"
#   tags: get-datomic-key

##Deploy Dtomic Client needed for app.

- name: Check datomic installation
  stat: path=/home/{{ maven_user }}/.m2/repository/com/datomic/datomic-pro/{{ datomic_version }}
  register: datomic

- name: Create temp directory
  file: state=directory path=/tmp/datomic owner={{ maven_user }}
  sudo: true
  when: not datomic.stat.exists

- name: Download datomic
  s3: bucket=vr-dist object=/archives/{{ datomic_filename }}.zip dest=/tmp/datomic/{{ datomic_filename }}.zip mode=get aws_access_key={{ ec2_access_key }} aws_secret_key={{ ec2_secret_key }}
  sudo: true
  when: not datomic.stat.exists

- name: Unpack datomic
  command: chdir=/tmp/datomic unzip {{ datomic_filename }}.zip
  sudo: true
  when: not datomic.stat.exists

- name: Local install to the maven_user repository
  command: su "{{ maven_user }}" -c 'bin/maven-install' chdir="/tmp/datomic/{{ datomic_filename }}"
  register: datomic_install
  sudo: true
  when: not datomic.stat.exists

- name: Remove temp directory
  file: path=/tmp/datomic
        state=absent
        recurse=yes
  sudo: true
  when: datomic_install|success




- name: Create source directory
  file: state=directory path=/var/lib/immutant/current/archives owner={{ maven_user }}
  sudo: true

- name: Remove previous code
  file: path=/var/lib/immutant/current/archives/{{ switchboard_app_name }}
        state=absent
        recurse=yes
  sudo: true


  
- name: make sure permissions are appropriate for deployer to update
  file: path=/var/lib/immutant/current/archives/{{ switchboard_app_name }}
        recurse=yes
        owner=ubuntu
        group=ubuntu
        mode=775
  sudo: true
  ignore_errors: true


- debug: msg="Code Version {{ switchboard_git_version }}"  
- name: ensure up to date application source /var/lib/immutant/current/archives/{{ switchboard_app_name }}
  git: repo={{ clojure_app_git_repo }}
       dest=/var/lib/immutant/current/archives/{{ switchboard_app_name }}
       version={{ switchboard_git_version }}
       depth=1
       update=yes
  register: git_pull
  sudo: false


- name: make immutant the owner of the tree
  file: path=/var/lib/immutant/current/archives/{{ switchboard_app_name }}
        recurse=yes
        owner=ubuntu
        group=ubuntu
        mode=775
  sudo: true


- name: upload utility scripts for dealing with immutant
  template: >
    src=smoke-test-switchboard-api.sh.j2
    dest="/var/lib/immutant/current/jboss/bin/smoke-test-switchboard-api.sh"
    owner=ubuntu group=admin
    mode=755
  sudo: true

- name: Create the immutant Archive .ima file
  environment:
    IMMUTANT_HOME: /var/lib/immutant/current
  command: "su ubuntu -c 'lein with-profile {{ switchboard_profiles }} immutant archive  /var/lib/immutant/current/archives/{{ switchboard_app_name }}{{ switchboard_app_root }}'"
  ignore_errors: no
  sudo: true


- name: Undeploy app by removing the file
  file: state=absent path=/var/lib/immutant/current/jboss/standalone/deployments/{{ switchboard_app_name }}.clj
  ignore_errors: true


- name: If is still undeploying then wait till its done
  wait_for: path=/var/lib/immutant/current/jboss/standalone/deployments/{{ switchboard_app_name }}.clj.undeployed timeout=30
  sudo: true
  ignore_errors: true

- name: gather ec2-specific facts
  action: ec2_facts
  environment: aws_creds
  
- debug: msg="System Groups {{ groups  }} "
- debug: msg="System  {{ groups['tag_'+environ|default('dev')+'_cassandra_']  }} || {{ hostvars[groups['tag_'+environ|default('dev')+'_cassandra_'][0]] }}"
 
- name: configure and install switchboard 
  template: src=deployment-descriptor.clj.j2 dest=/var/lib/immutant/current/jboss/standalone/deployments/{{ switchboard_app_name }}.clj
  sudo: true
  tags: datomic-conf


- name: Install app
  command: su ubuntu -c 'touch /var/lib/immutant/current/jboss/standalone/deployments/{{ switchboard_app_name }}.clj.dodeploy'
  sudo: true


# Cludgy immutant server handling
# note this restart is due to Clojure Permgen issue to be resolved wiht Clojure 1.6 
- name: stop immutant
  service: name=immutant state=stopped enabled=yes
  sudo: true

- name: get jboss pid
  command: 'ps -ef | grep jboss\\\.home | grep -v grep | awk ''{print $2}'''
  ignore_errors: true
  register: jboss_pid
  sudo: true

- debug: msg="jboss pid 1 {{ jboss_pid  }} "

- name: sleep 30 seconds to let it shutdown
  wait_for: host={{ inventory_hostname }} port={{ switchboard_port }} state=stopped delay=720 timeout=740
  when: not "'ERROR' in jboss_pid.stderr"



- name: get jboss pid 2
  command: 'ps -ef | grep jboss\.home | grep -v grep | awk ''{print $2}'''
  ignore_errors: true
  register: jboss_pid2
  sudo: true

- debug: msg="jboss pid 2 {{ jboss_pid2  }} "

- name: stop immutant
  service: name=immutant state=stopped enabled=yes
  when: not "'ERROR' in jboss_pid2.stderr"
  sudo: true

- name: sleep 30 seconds to let it shutdown
  wait_for: host={{ inventory_hostname }} port={{ switchboard_port }} state=stopped delay=180 timeout=740
  when: not "'ERROR' in jboss_pid2.stderr"



- name: If it hasnt shut down by now kill immutant
  command: '/var/lib/immutant/current/jboss/bin/kill-jboss.sh'
  ignore_errors: true
  register: jboss_pidkill
  sudo: true


- debug: msg="jboss pid killed reponse {{ jboss_pidkill  }} "


- name: start immutant
  service: name=immutant state=started enabled=yes
  sudo: true


- name: wait until immutant comes back up, simple smoke test and to enforce rolling restart
  wait_for: host={{ inventory_hostname }} port=9990 state=started delay=120 timeout=740



- name: check API endpoint and fail if not working
  command: '/var/lib/immutant/current/jboss/bin/smoke-test-switchboard-api.sh'
  register: result
  failed_when: not result.stdout.find('Authenticated')
  changed_when: False

