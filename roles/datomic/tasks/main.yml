---
- name: Create datomic user.
  user: name=datomic state=present

- name: Create datomic data directory
  file: state=directory path={{ datomic_data_dir }} owner=datomic group=datomic

- name: Make datomic log directory
  file: state=directory path=/var/log/datomic owner=datomic group=datomic
    
- name: Check datomic installation
  command: "ls {{ datomic_dir }}/{{ datomic_filename }}"
  register: datomic_exists
  ignore_errors: true

- name: Create datomic directory
  file: state=directory path={{ datomic_dir }} owner=datomic group=datomic
  when: datomic_exists|failed

- name: Download datomic
  s3: bucket=vr-dist object=/archives/{{ datomic_filename }}.zip dest={{ datomic_dir }}/{{ datomic_filename }}.zip mode=get aws_access_key={{ aws_access }} aws_secret_key={{ aws_secret }}
  when: datomic_exists|failed

- name: Unpack datomic
  command: chdir={{ datomic_dir }} unzip {{ datomic_filename }}.zip
  when: datomic_exists|failed

- name: datomic dir permissions
  shell: chown -R datomic:datomic {{ datomic_dir }}/{{ datomic_filename }}

- name: Upload datomic properties file
  template: src=transactor.properties.{{  datomic_protocol  }}.j2 dest={{ datomic_dir }}/transactor.properties owner=datomic group=datomic mode=0600
  notify:
    - restart datomic

- name: Upload datomic upstart config file
  template: src=datomic-upstart.conf.j2 dest=/etc/init/datomic.conf
    
- name: Link datomic
  file: src={{ datomic_dir }}/{{ datomic_filename }}
        dest={{ datomic_dir }}/runtime
        owner=datomic
        group=datomic
        state=link
  notify:
    - restart datomic
  when: datomic_exists|failed

- name: ensure datomic is running
  service: name=datomic state=started